{"ast":null,"code":"import { defineComponent, onMounted, ref, watch } from 'vue';\nimport axios from \"axios\";\nimport { notification } from \"ant-design-vue\";\nexport default defineComponent({\n  name: \"station-select-view\",\n  props: [\"modelValue\", \"width\"],\n  emits: ['update:modelValue', 'change'],\n  setup(props, {\n    emit\n  }) {\n    const name = ref();\n    const stations = ref([]);\n    const localWidth = ref(props.width);\n    if (Tool.isEmpty(props.width)) {\n      localWidth.value = \"100%\";\n    }\n\n    // 利用watch，动态获取父组件的值，如果放在onMounted或其它方法里，则只有第一次有效\n    watch(() => props.modelValue, () => {\n      console.log(\"props.modelValue\", props.modelValue);\n      name.value = props.modelValue;\n    }, {\n      immediate: true\n    });\n\n    /**\n     * 查询所有的车站，用于车站下拉框\n     */\n    const queryAllStation = () => {\n      axios.get(\"/business/admin/station/query-all\").then(response => {\n        let data = response.data;\n        if (data.success) {\n          stations.value = data.content;\n        } else {\n          notification.error({\n            description: data.message\n          });\n        }\n      });\n    };\n\n    /**\n     * 车站下拉框筛选\n     */\n    const filterNameOption = (input, option) => {\n      console.log(input, option);\n      return option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    };\n\n    /**\n     * 将当前组件的值响应给父组件\n     * @param value\n     */\n    const onChange = value => {\n      emit('update:modelValue', value);\n      let station = stations.value.filter(item => item.code === value)[0];\n      if (Tool.isEmpty(station)) {\n        station = {};\n      }\n      emit('change', station);\n    };\n    onMounted(() => {\n      queryAllStation();\n    });\n    return {\n      name,\n      stations,\n      filterNameOption,\n      onChange,\n      localWidth\n    };\n  }\n});","map":{"version":3,"mappings":"AAaA,SAAQA,eAAe,EAAEC,SAAS,EAAEC,GAAG,EAAEC,KAAK,QAAO,KAAK;AAC1D,OAAOC,KAAI,MAAO,OAAO;AACzB,SAAQC,YAAY,QAAO,gBAAgB;AAE3C,eAAeL,eAAe,CAAC;EAC7BM,IAAI,EAAE,qBAAqB;EAC3BC,KAAK,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC;EAC9BC,KAAK,EAAE,CAAC,mBAAmB,EAAE,QAAQ,CAAC;EACtCC,KAAK,CAACF,KAAK,EAAE;IAACG;EAAI,CAAC,EAAE;IACnB,MAAMJ,IAAG,GAAIJ,GAAG,EAAE;IAClB,MAAMS,QAAO,GAAIT,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMU,UAAS,GAAIV,GAAG,CAACK,KAAK,CAACM,KAAK,CAAC;IACnC,IAAIC,IAAI,CAACC,OAAO,CAACR,KAAK,CAACM,KAAK,CAAC,EAAE;MAC7BD,UAAU,CAACI,KAAI,GAAI,MAAM;IAC3B;;IAEA;IACAb,KAAK,CAAC,MAAMI,KAAK,CAACU,UAAU,EAAE,MAAI;MAChCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEZ,KAAK,CAACU,UAAU,CAAC;MACjDX,IAAI,CAACU,KAAI,GAAIT,KAAK,CAACU,UAAU;IAC/B,CAAC,EAAE;MAACG,SAAS,EAAE;IAAI,CAAC,CAAC;;IAErB;;;IAGA,MAAMC,eAAc,GAAI,MAAM;MAC5BjB,KAAK,CAACkB,GAAG,CAAC,mCAAmC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;QAChE,IAAIC,IAAG,GAAID,QAAQ,CAACC,IAAI;QACxB,IAAIA,IAAI,CAACC,OAAO,EAAE;UAChBf,QAAQ,CAACK,KAAI,GAAIS,IAAI,CAACE,OAAO;QAC/B,OAAO;UACLtB,YAAY,CAACuB,KAAK,CAAC;YAACC,WAAW,EAAEJ,IAAI,CAACK;UAAO,CAAC,CAAC;QACjD;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;;;IAGA,MAAMC,gBAAe,GAAI,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1Cf,OAAO,CAACC,GAAG,CAACa,KAAK,EAAEC,MAAM,CAAC;MAC1B,OAAOA,MAAM,CAACC,KAAK,CAACC,WAAW,EAAE,CAACC,OAAO,CAACJ,KAAK,CAACG,WAAW,EAAE,KAAK,CAAC;IACrE,CAAC;;IAED;;;;IAIA,MAAME,QAAO,GAAKrB,KAAK,IAAK;MAC1BN,IAAI,CAAC,mBAAmB,EAAEM,KAAK,CAAC;MAChC,IAAIsB,OAAM,GAAI3B,QAAQ,CAACK,KAAK,CAACuB,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAG,KAAMzB,KAAK,CAAC,CAAC,CAAC,CAAC;MACnE,IAAIF,IAAI,CAACC,OAAO,CAACuB,OAAO,CAAC,EAAE;QACzBA,OAAM,GAAI,CAAC,CAAC;MACd;MACA5B,IAAI,CAAC,QAAQ,EAAE4B,OAAO,CAAC;IACzB,CAAC;IAEDrC,SAAS,CAAC,MAAM;MACdoB,eAAe,EAAE;IACnB,CAAC,CAAC;IAEF,OAAO;MACLf,IAAI;MACJK,QAAQ;MACRoB,gBAAgB;MAChBM,QAAQ;MACRzB;IACF,CAAC;EACH;AACF,CAAC,CAAC","names":["defineComponent","onMounted","ref","watch","axios","notification","name","props","emits","setup","emit","stations","localWidth","width","Tool","isEmpty","value","modelValue","console","log","immediate","queryAllStation","get","then","response","data","success","content","error","description","message","filterNameOption","input","option","label","toLowerCase","indexOf","onChange","station","filter","item","code"],"sourceRoot":"","sources":["E:\\Desktop\\projectCode\\12306\\train\\admin\\src\\components\\station-select.vue"],"sourcesContent":["<template>\n  <a-select v-model:value=\"name\" show-search allowClear\n            :filterOption=\"filterNameOption\"\n            @change=\"onChange\" placeholder=\"请选择车站\"\n            :style=\"'width: ' + localWidth\">\n    <a-select-option v-for=\"item in stations\" :key=\"item.name\" :value=\"item.name\" :label=\"item.name + item.namePinyin + item.namePy\">\n      {{item.name}} {{item.namePinyin}} ~ {{item.namePy}}\n    </a-select-option>\n  </a-select>\n</template>\n\n<script>\n\nimport {defineComponent, onMounted, ref, watch} from 'vue';\nimport axios from \"axios\";\nimport {notification} from \"ant-design-vue\";\n\nexport default defineComponent({\n  name: \"station-select-view\",\n  props: [\"modelValue\", \"width\"],\n  emits: ['update:modelValue', 'change'],\n  setup(props, {emit}) {\n    const name = ref();\n    const stations = ref([]);\n    const localWidth = ref(props.width);\n    if (Tool.isEmpty(props.width)) {\n      localWidth.value = \"100%\";\n    }\n\n    // 利用watch，动态获取父组件的值，如果放在onMounted或其它方法里，则只有第一次有效\n    watch(() => props.modelValue, ()=>{\n      console.log(\"props.modelValue\", props.modelValue);\n      name.value = props.modelValue;\n    }, {immediate: true});\n\n    /**\n     * 查询所有的车站，用于车站下拉框\n     */\n    const queryAllStation = () => {\n      axios.get(\"/business/admin/station/query-all\").then((response) => {\n        let data = response.data;\n        if (data.success) {\n          stations.value = data.content;\n        } else {\n          notification.error({description: data.message});\n        }\n      });\n    };\n\n    /**\n     * 车站下拉框筛选\n     */\n    const filterNameOption = (input, option) => {\n      console.log(input, option);\n      return option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    };\n\n    /**\n     * 将当前组件的值响应给父组件\n     * @param value\n     */\n    const onChange = (value) => {\n      emit('update:modelValue', value);\n      let station = stations.value.filter(item => item.code === value)[0];\n      if (Tool.isEmpty(station)) {\n        station = {};\n      }\n      emit('change', station);\n    };\n\n    onMounted(() => {\n      queryAllStation();\n    });\n\n    return {\n      name,\n      stations,\n      filterNameOption,\n      onChange,\n      localWidth\n    };\n  },\n});\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}